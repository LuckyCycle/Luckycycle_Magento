<?php

require_once(Mage::getBaseDir('lib') . '/luckysdk/lucky.php');

// Get module settings from admin panel
$enabledSnippet = Mage::getStoreConfig('snippetsdk/params/enabled');
$apiKey = trim(Mage::getStoreConfig('snippetsdk/params/api_id'));
$operationKey = trim(Mage::getStoreConfig('snippetsdk/params/operation_id'));
$payment_methods = explode(",", Mage::getStoreConfig('snippetsdk/params/payment_method_luckycyclesdk'));

// Get global data
$storeCode = Mage::app()->getStore()->getCode();
$userIP = Mage::helper('core/http')->getRemoteAddr();

// Get data about current order
$orderId = $this->getOrderId();
$order = Mage::getModel('sales/order')->loadByIncrementId($orderId);
$paymentMethodCode = $order->getPayment()->getMethodInstance()->getCode();
$quote = Mage::getModel('sales/quote')->load($order->getQuoteId());
$orderDetails = $order->getData();
$couponCode = $orderDetails['coupon_code'];
$discount = 0;

if ($enabledSnippet) {
    if ($operationKey && $apiKey) {

        // Get user ID...
        $customerId = Mage::getSingleton('customer/session')->getCustomerId();
        if ($customerId) {
            // ... when logged in
            $customer = Mage::getSingleton('customer/session')->getCustomer();
            $firstName = $customer->getFirstname();
            $lastName = $customer->getLastname();
            $emailCustomer = $customer->getEmail();
        } else {
            // ... when not logged in (guest)
            $firstName = $quote->getBillingAddress()->getFirstname();
            $lastName = $quote->getBillingAddress()->getLastname();
            $emailCustomer = $quote->getBillingAddress()->getEmail();
            $customerId = "guest_" . md5("guest".$emailCustomer);
        }

        // Get currency / locale
        $currency = $order->getOrderCurrency();
        if (is_object($currency)) {
            $currencyCode = $currency->getCurrencyCode();
        }
        $currencySymbol = Mage::app()->getLocale()->currency($currencyCode)->getSymbol();
        $language = Mage::getStoreConfig('general/locale/code', Mage::app()->getStore()->getId());
        $language = explode('_', $language);
        $language = $language[0];

        // Get amount
        $amount = $order->getGrandTotal() - $order->getShippingAmount();
        $real_paid = $quote['grand_total'];

        // Get cart
        $the_cart = array();

        foreach ($quote->getAllItems() as $order_item) {

            // Get item price including tax -- excluding free products
            $price = $order_item->getPriceInclTax();
            if ($price > 0) {
                $item['price'] = $order_item->getPriceInclTax();
                $item['quantity'] = $order_item->getQty();
                $item['product_id'] = $order_item->getProduct()->getId();
                $item['product_name'] = $order_item->getProduct()->getName();
                $item['product_url'] = $order_item->getProduct()->getProductUrl();

                // Increment total discount with this item
                $discount += $order_item->getBaseDiscountAmount();

                // Get item category ID
                $topCategory = Mage::getResourceModel('catalog/category_collection')
                    ->addIdFilter($order_item->getProduct()->getCategoryIds())
                    ->setOrder('level', 'ASC')
                    ->setPage(1, 1)
                    ->getFirstItem();
                $topCategoryId = $topCategory->getId();
                $item['category_id'] = $topCategoryId;

                // Get product ID
                $model_product = Mage::getModel('catalog/product');
                $_productObject = $model_product->load($order_item->getProduct()->getId());

                // Get manufacturer ID
                if ($_productObject->getAttributeText('manufacturer')) {
                    $item['manufacturer_id'] = $_productObject->getAttributeText('manufacturer');
                } else {
                    $item['manufacturer_id'] = 1;
                }

                $item['reference'] = 'reference';

                // Fill the cart with item
                array_push($the_cart, $item);
            }
        }

        // Setup API call to Luckycycle
        $req = new LuckyCycleApi('https://www.luckycycle.com');
        $req->setApiKey($apiKey);
        $req->setOperationId($operationKey);

        // Prepare poke data
        $pokedata = array(
            'user_uid' => (string)$customerId,
            'item_uid' => (string)$orderId,
            'item_value' => (string)$amount,
            'item_currency' => (string)$currencyCode,
            'language' => (string)$language,
            'firstname' => (string)$firstName,
            'lastname' => (string)$lastName,
            'email' => (string)$emailCustomer,
            'discount' => (string)$discount,
            'payment_method' => (string)$paymentMethodCode,
            'shipping_value' => (string)$order->getShippingAmount(),
            'order_date' => (string)$order->getCreatedAt(),
            'poke_data' => '{ "store_code": "'.(string)$storeCode.'", "user_ip": "'.(string)$userIP.'"}',
            'cart' => $the_cart
        );

        // Force error (PIKE) if the current payment method is not in the list of eligible payment methods
        if(!in_array($paymentMethodCode, $payment_methods)) {
            $pokedata['force_pike'] == 1;
        }

        try {
            // Make API call to Luckycycle
            $poke = $req->poke($pokedata);
        } catch (Exception $e) {
            Mage::log("Luckycycle : ". $e->getMessage());
        }

        if($poke)
        {
            // Show html_data response (either the iframe or an error)
            ?>
            <div id="content-api-luckycycle">
                <?php echo "<div>" . $poke['html_data'] . "</div>"; ?>
            </div>
        <?php
        } else {
            Mage::log("Luckycycle didnt get a valid response from the API call.");
        }
    } else {
        Mage::log("Luckycycle : Wrong API key or operation ID.");
    }
} else {
    Mage::log("Luckycycle module is not enable");
}